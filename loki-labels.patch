diff --git a/src/sinks/loki.rs b/src/sinks/loki.rs
index a5d571920..3bebf0672 100644
--- a/src/sinks/loki.rs
+++ b/src/sinks/loki.rs
@@ -26,10 +26,14 @@ use crate::{
     },
     template::Template,
     tls::{TlsOptions, TlsSettings},
+    internal_events::TemplateRenderingFailed,
 };
 use futures::{FutureExt, SinkExt};
 use serde::{Deserialize, Serialize};
 use std::collections::HashMap;
+use regex::Regex;
+use std::convert::TryFrom;
+
 
 #[derive(Clone, Debug, Deserialize, Serialize)]
 #[serde(deny_unknown_fields)]
@@ -197,9 +201,47 @@ impl HttpSink for LokiSink {
 
         let mut labels = Vec::new();
 
+        let re = Regex::new(r"^\{\{ (?P<template_key>[^{} ]+) \}\}$").unwrap();
+
         for (key, template) in &self.labels {
-            if let Ok(value) = template.render_string(&event) {
-                labels.push((key.clone(), value));
+            if template.is_dynamic() {
+                if re.is_match(template.get_ref()) {
+                    let template_key = re.replace_all(template.get_ref(), "$template_key");
+                    if let Some(_internal_val) = event.as_log().get(template_key.clone()) {
+                        match _internal_val {
+                            Value::Map(_map) => {
+                                let _map = event.as_log().get(template_key.clone()).unwrap().as_map().unwrap();
+                                let intkeys: Vec<_> = _map.keys().cloned().collect();
+                                for int_key in intkeys.iter() {
+                                    let tmp_key = format!("{{{{ {}.{} }}}}", key, convert_key(int_key.to_string()));
+                                    let loki_key = slugify_text(format!("{}_{}", key, int_key));
+                                    let tmp_template = Template::try_from(tmp_key.clone()).unwrap();
+                                    let _str_val = match tmp_template.render_string(&event) {
+                                        Ok(str_val) => {
+                                            labels.push((loki_key.clone(), str_val));
+                                        },
+                                        Err(error) => {
+                                            emit!(TemplateRenderingFailed {
+                                                error,
+                                                field: Some(&tmp_key),
+                                                drop_event: false,
+                                            });
+                                        }
+                                    };
+                                }
+                            },
+                            _ => {
+                                if let Ok(value) = template.render_string(&event) {
+                                    labels.push((key.clone(), value));
+                                }
+                            },
+                        }
+                    }
+                }
+            } else {
+                if let Ok(value) = template.render_string(&event) {
+                    labels.push((key.clone(), value));
+                }
             }
         }
 
@@ -298,6 +340,19 @@ async fn healthcheck(config: LokiConfig, client: HttpClient) -> crate::Result<()
     Ok(())
 }
 
+// convert strings to Loki format
+fn slugify_text (s: String) -> String {
+    let re = Regex::new(r"[^0-9A-Za-z_]").unwrap();
+    let result = re.replace_all(&s, "_");
+    return result.to_lowercase();
+}
+
+// convert keys to template format
+fn convert_key (s: String) -> String {
+    let res = s.replace(".", "\\.").replace("]", "\\]").replace("[", "\\[");
+    return res
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
