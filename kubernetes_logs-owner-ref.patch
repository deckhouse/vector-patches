diff --git a/src/sources/kubernetes_logs/mod.rs b/src/sources/kubernetes_logs/mod.rs
index a2a7e83..32b419b 100644
--- a/src/sources/kubernetes_logs/mod.rs
+++ b/src/sources/kubernetes_logs/mod.rs
@@ -234,11 +234,15 @@ impl Source {
             timezone,
         } = self;
 
-        let watcher = k8s::api_watcher::ApiWatcher::new(client, Pod::watch_pod_for_all_namespaces);
+        let watcher =
+            k8s::api_watcher::ApiWatcher::new(client.clone(), Pod::watch_pod_for_all_namespaces);
         let watcher = k8s::instrumenting_watcher::InstrumentingWatcher::new(watcher);
         let (state_reader, state_writer) = evmap::new();
-        let state_writer =
-            k8s::state::evmap::Writer::new(state_writer, Some(Duration::from_millis(10)));
+        let state_writer = k8s::state::evmap::Writer::new(
+            state_writer,
+            client.clone(),
+            Some(Duration::from_millis(10)),
+        );
         let state_writer = k8s::state::instrumenting::Writer::new(state_writer);
         let state_writer =
             k8s::state::delayed_delete::Writer::new(state_writer, Duration::from_secs(60));
diff --git a/src/sources/kubernetes_logs/pod_metadata_annotator.rs b/src/sources/kubernetes_logs/pod_metadata_annotator.rs
index 0bcb5e7..e1ff935 100644
--- a/src/sources/kubernetes_logs/pod_metadata_annotator.rs
+++ b/src/sources/kubernetes_logs/pod_metadata_annotator.rs
@@ -24,6 +24,7 @@ pub struct FieldsSpec {
     pub pod_ips: String,
     pub pod_labels: String,
     pub pod_node_name: String,
+    pub pod_owner: String,
     pub container_name: String,
     pub container_id: String,
     pub container_image: String,
@@ -39,6 +40,7 @@ impl Default for FieldsSpec {
             pod_ips: "kubernetes.pod_ips".to_owned(),
             pod_labels: "kubernetes.pod_labels".to_owned(),
             pod_node_name: "kubernetes.pod_node_name".to_owned(),
+            pod_owner: "kubernetes.pod_owner".to_owned(),
             container_name: "kubernetes.container_name".to_owned(),
             container_id: "kubernetes.container_id".to_owned(),
             container_image: "kubernetes.container_image".to_owned(),
@@ -131,6 +133,13 @@ fn annotate_from_metadata(log: &mut LogEvent, fields_spec: &FieldsSpec, metadata
         }
     }
 
+    if let Some(owner_references) = &metadata.owner_references {
+        log.insert(
+            &fields_spec.pod_owner,
+            format!("{}/{}", owner_references[0].kind, owner_references[0].name),
+        );
+    }
+
     if let Some(labels) = &metadata.labels {
         // Calculate and cache the prefix path.
         let prefix_path = PathIter::new(fields_spec.pod_labels.as_ref()).collect::<Vec<_>>();
